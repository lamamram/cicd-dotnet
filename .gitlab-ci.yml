# image par défaut des jobs du pipeline
# utilisation du registre d'image privé
# utilisation d'une variable d'environnement
image: $CI_REGISTRY_IMAGE/dotnet-sdk:3.1-debian-11

# liste des étapes d'exécution du pipeline
stages:
  - testing
  - building
  - deploying

variables:
  TRIGGER_CACHE: "off"
  DOTNET_CLI_HOME: "$CI_PROJECT_DIR"

# génération des dépendances des projets
restore:
  stage: .pre
  script:
    - dotnet restore
  tags:
    - myusine
  # génération d'un cache mis à disposition des autres jobs
  cache:
    key: nuget
    paths:
      - ~/.nuget
    policy: push
  rules:
    - changes:
        - "**/*.csproj"
    - if: $TRIGGER_CACHE == "on"

unit test:
  # association du job à un stage
  stage: testing
  script:
    # ">" permet d'écrire une longue ligne sur plusieurs lignes
    # en remplaçant les sauts de ligne par des espaces
    - >
      dotnet test 
      --logger "junit;LogFilePath=reports/test-result.xml" 
      --results-directory:reports
  tags:
    - myusine
  # remonter le rapport de tests dans gitlab 
  # - pour téléchargement
  # - pour visualisation
  artifacts: 
    expire_in: 1 hour
    # chemin pour prélever et proposer au téléchargement
    paths:
      - 020123/reports/
    # chemin pour prélever et intégrer à l'interface de gitlab pour visualisation
    reports:
      junit: 020123/reports/test-result.xml
  # récupération du cache
  # on exécute les tests sans demander l'install des déps (--no-restore)
  cache:
    key: nuget
    untracked: true
    policy: pull

# préfixer un job par "." desactive le job
.build:
  stage: building
  script:
    - echo "Build"
  tags:
    - myusine

# job de déploiement
# s'exécute uniquement sur master et manuellement (livraison continue)
.prod:
  stage: deploying
  script:
    - echo "Deploy !"
  tags:
    - myusine
  rules:
    - if: $CI_COMMIT_BRANCH == "master"
      when: manual

