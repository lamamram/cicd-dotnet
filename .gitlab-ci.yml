# image par défaut des jobs du pipeline
# utilisation du registre d'image privé
# utilisation d'une variable d'environnement
image: $CI_REGISTRY_IMAGE/dotnet-sdk:3.1-debian-11

# liste des étapes d'exécution du pipeline
stages:
  - testing
  - building
  - deploying

variables:
  TRIGGER_CACHE: "off"


restore:
  # génération du cache pour 2 threads (jobs parallèles)
  parallel: 2
  stage: .pre
  script:
    - dotnet restore --packages .nuget
  tags:
    - myusine
  cache:
    key: nuget
    paths:
      - .nuget/
    policy: push
  rules:
    - changes:
        - "**/*.csproj"
    - if: $TRIGGER_CACHE == "on"

unit test:
  stage: testing
  before_script:
    - dotnet restore --packages .nuget
  # /p ... => calcul de la couverture de code au format cobertura (java)
  # --collect => génération du rapport de couv
  # --no-restore => ne pas redemander les dépendances (déjà fait)
  # --logger => génération du rapport de testunitaire au format junit
  # --result-directory => dossier racine des rapports
  script:
    - >
      dotnet test
      /p:CollectCoverage=true 
      /p:CoverletOutputFormat=cobertura 
      --collect:"XPlat Code Coverage"
      --no-restore
      --filter TestCategory=Unit
      --logger "junit;LogFilePath=reports/test-result.xml" 
      --results-directory:"$CI_PROJECT_DIR/020123/reports"
    # affichage du fichier xml dans a console
    # associé à la regex <[a-z =-]+"0\.([0-9]{2}).* dans settings -> CICD -> general pipelines
    - cov_path=$(find 020123/reports -name "coverage.cobertura.xml" -type f)
    - cat $cov_path
  tags:
    - myusine
  artifacts: 
    expire_in: 1 hour
    paths:
      - 020123/reports/
    reports:
      junit: 020123/reports/test-result.xml
      cobertura: "020123/reports/**/coverage.cobertura.xml"
  cache:
    key: nuget
    untracked: true
    policy: pull

e2e:
  stage: testing
  # service réseau éphémère 
  # dispo sur le sous réseau des conteneurs (172.17.0.1 par défaut)
  # avec le nom de l'alias => (ajouté dans les tests)
  services:
    - name: selenium/standalone-firefox:latest
      alias: selenium_server
  before_script:
    - dotnet restore --packages .nuget
    # installation du driver dans un emplacement du PATH et exécutable
    - mv geckodriver /usr/bin/geckodriver
    - chmod +x /usr/bin/geckodriver
  script:
    # on filtre les tests sur les catégories
    - >
      dotnet test
      --no-restore
      --filter TestCategory=E2E
  tags:
    - myusine
  cache:
    key: nuget
    untracked: true
    policy: pull

.build:
  stage: building
  script:
    - echo "Build"
  tags:
    - myusine

prod:
  stage: deploying
  script:
    - echo "Deploy !"
  tags:
    - myusine
  # ajoute une entrée dans l'interface Deployments -> environments
  environment:
    name: prod
    url: https://dawan.fr
  # on ne déploie que si un tag est poussé
  rules:
    - if: $CI_COMMIT_TAG 
      when: manual

